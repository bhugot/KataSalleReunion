// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class RoomBookingFeature : Xunit.IClassFixture<RoomBookingFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "RoomBooking.feature"
#line hidden
        
        public RoomBookingFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Room booking", "\tIn order to have a room for my meeting\r\n\tAs Julien\r\n\tI want to be able book a ro" +
                    "om", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table1.AddRow(new string[] {
                        "room0"});
            table1.AddRow(new string[] {
                        "room1"});
            table1.AddRow(new string[] {
                        "room2"});
            table1.AddRow(new string[] {
                        "room3"});
            table1.AddRow(new string[] {
                        "room4"});
            table1.AddRow(new string[] {
                        "room5"});
            table1.AddRow(new string[] {
                        "room6"});
            table1.AddRow(new string[] {
                        "room7"});
            table1.AddRow(new string[] {
                        "room8"});
            table1.AddRow(new string[] {
                        "room9"});
#line 7
 testRunner.Given("I have all the following rooms:", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        public virtual void SetFixture(RoomBookingFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Book room when not used")]
        [Xunit.TraitAttribute("FeatureTitle", "Room booking")]
        [Xunit.TraitAttribute("Description", "Book room when not used")]
        public virtual void BookRoomWhenNotUsed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Book room when not used", ((string[])(null)));
#line 20
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 21
 testRunner.Given("their is no previous registration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 22
 testRunner.When("I book the room room1 as Julien for the 08/26/2013 from 2pm to 4pm", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 23
 testRunner.Then("the result should be ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Book room when other hour already booked")]
        [Xunit.TraitAttribute("FeatureTitle", "Room booking")]
        [Xunit.TraitAttribute("Description", "Book room when other hour already booked")]
        public virtual void BookRoomWhenOtherHourAlreadyBooked()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Book room when other hour already booked", ((string[])(null)));
#line 24
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "room",
                        "user",
                        "date",
                        "start",
                        "end"});
            table2.AddRow(new string[] {
                        "room1",
                        "Julien",
                        "08/26/2013",
                        "2pm",
                        "4pm"});
            table2.AddRow(new string[] {
                        "room1",
                        "Julien",
                        "08/26/2013",
                        "6pm",
                        "7pm"});
#line 25
 testRunner.Given("their is previous registrations:", ((string)(null)), table2, "Given ");
#line 29
 testRunner.When("I book the room room1 as Julien for the 08/26/2013 from 5pm to 6pm", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
 testRunner.Then("the result should be ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Unbook room")]
        [Xunit.TraitAttribute("FeatureTitle", "Room booking")]
        [Xunit.TraitAttribute("Description", "Unbook room")]
        public virtual void UnbookRoom()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unbook room", ((string[])(null)));
#line 33
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "room",
                        "user",
                        "date",
                        "start",
                        "end"});
            table3.AddRow(new string[] {
                        "room1",
                        "Julien",
                        "08/26/2013",
                        "2pm",
                        "4pm"});
#line 34
 testRunner.Given("their is previous registrations:", ((string)(null)), table3, "Given ");
#line 37
 testRunner.When("I unbook the room room1 as Julien for the 08/26/2013 at 2pm", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 38
 testRunner.Then("the result should be ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Book room already used should return the empty slots")]
        [Xunit.TraitAttribute("FeatureTitle", "Room booking")]
        [Xunit.TraitAttribute("Description", "Book room already used should return the empty slots")]
        public virtual void BookRoomAlreadyUsedShouldReturnTheEmptySlots()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Book room already used should return the empty slots", ((string[])(null)));
#line 40
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "room",
                        "user",
                        "date",
                        "start",
                        "end"});
            table4.AddRow(new string[] {
                        "room1",
                        "Kevin",
                        "08/26/2013",
                        "2am",
                        "12am"});
            table4.AddRow(new string[] {
                        "room1",
                        "Kevin",
                        "08/26/2013",
                        "2pm",
                        "4pm"});
            table4.AddRow(new string[] {
                        "room1",
                        "Julien",
                        "08/26/2013",
                        "6pm",
                        "7pm"});
#line 41
 testRunner.Given("their is previous registrations:", ((string)(null)), table4, "Given ");
#line 46
 testRunner.When("I book the room room1 as Julien for the 08/26/2013 from 2pm to 3pm", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 47
 testRunner.Then("the result should be a conflict", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "start",
                        "end"});
            table5.AddRow(new string[] {
                        "0am",
                        "1am"});
            table5.AddRow(new string[] {
                        "1am",
                        "2am"});
            table5.AddRow(new string[] {
                        "12am",
                        "1pm"});
            table5.AddRow(new string[] {
                        "1pm",
                        "2pm"});
            table5.AddRow(new string[] {
                        "4pm",
                        "5pm"});
            table5.AddRow(new string[] {
                        "5pm",
                        "6pm"});
            table5.AddRow(new string[] {
                        "7pm",
                        "8pm"});
            table5.AddRow(new string[] {
                        "8pm",
                        "9pm"});
            table5.AddRow(new string[] {
                        "9pm",
                        "10pm"});
            table5.AddRow(new string[] {
                        "10pm",
                        "11pm"});
            table5.AddRow(new string[] {
                        "11pm",
                        "12pm"});
#line 48
 testRunner.And("the responses should contains following slots:", ((string)(null)), table5, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Book room already used should return the empty slots another case")]
        [Xunit.TraitAttribute("FeatureTitle", "Room booking")]
        [Xunit.TraitAttribute("Description", "Book room already used should return the empty slots another case")]
        public virtual void BookRoomAlreadyUsedShouldReturnTheEmptySlotsAnotherCase()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Book room already used should return the empty slots another case", ((string[])(null)));
#line 63
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "room",
                        "user",
                        "date",
                        "start",
                        "end"});
            table6.AddRow(new string[] {
                        "room1",
                        "Kevin",
                        "08/26/2013",
                        "0am",
                        "12am"});
            table6.AddRow(new string[] {
                        "room1",
                        "Kevin",
                        "08/26/2013",
                        "2pm",
                        "4pm"});
            table6.AddRow(new string[] {
                        "room1",
                        "Julien",
                        "08/26/2013",
                        "6pm",
                        "12pm"});
#line 64
 testRunner.Given("their is previous registrations:", ((string)(null)), table6, "Given ");
#line 69
 testRunner.When("I book the room room1 as Julien for the 08/26/2013 from 2pm to 3pm", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 70
 testRunner.Then("the result should be a conflict", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "start",
                        "end"});
            table7.AddRow(new string[] {
                        "12am",
                        "1pm"});
            table7.AddRow(new string[] {
                        "1pm",
                        "2pm"});
            table7.AddRow(new string[] {
                        "4pm",
                        "5pm"});
            table7.AddRow(new string[] {
                        "5pm",
                        "6pm"});
#line 71
 testRunner.And("the responses should contains following slots:", ((string)(null)), table7, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                RoomBookingFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                RoomBookingFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
